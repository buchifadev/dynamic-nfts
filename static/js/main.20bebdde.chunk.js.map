{"version":3,"sources":["assets/logo.png","components/minter/Cover.js","components/ui/Notifications.js","hooks/useDynamicContract.js","hooks/useContract.js","utils/minter.js","utils/constants.js","components/minter/nfts/Add.js","utils/index.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","components/ui/Identicon.js","components/wallet/index.js","assets/dynamic_image.jfif","components/navbar/NavBar.js","App.js","hooks/useBalance.js","index.js"],"names":["Cover","connect","className","src","logo","alt","onClick","catch","e","console","log","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","useDynamicContract","abi","contractAddress","useContractKit","getConnectedKit","address","useState","contract","setContract","getContract","useCallback","kit","web3","eth","Contract","useEffect","useContract","Dynamic","formattedName","name","trim_name","trim","includes","replaceAll","makeFileObjects","file","blob","Blob","JSON","stringify","type","File","client","Web3Storage","token","process","storeFiles","files","put","cid","uploadToIpfs","file_name","image_name","image_cid","image_url","mint","performActions","description","ipfsImage","source","price","defaultAccount","data","image","owner","file_cid","tokenURI","_price","BigNumber","shiftedBy","toString","methods","mintToken","send","from","tx","fetchMetadata","ipfsUrl","fetch","fetch_meta","json","meta","getMarketTokens","getAllMarketTokens","call","allTokens","Promise","all","map","_token","tokenId","tokenData","id","seller","sold","tokens","myTokens","getMyTokens","buyToken","value","AddNfts","save","setName","setImage","setDescription","setSource","setPrice","show","setShow","handleClose","class","Modal","onHide","centered","Header","Title","style","color","width","textAlign","Body","Form","Control","placeholder","height","fontSize","onChange","target","as","fontFamily","image_file","imageUrl","alert","Footer","disabled","truncateAddress","slice","length","formatBigNumber","num","toFixed","ViewImage","props","size","Button","ViewCode","rows","padding","Nft","nft","buy","filter","showImage","setShowImage","showCode","setShowCode","Loader","Spinner","animation","role","NftList","dynamicContract","marketTokens","setMarketTokens","allMyTokens","setAllMyTokens","loading","setLoading","fetchMarketTokens","_tokens","error","fetchAllMyTokens","_myTokens","toast","purchasePrice","Add","_nft","index","vContract","Identicon","rest","ref","useRef","current","innerHTML","appendChild","Jazzicon","parseInt","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","Menu","Item","href","Stack","direction","gap","Divider","NavBar","balance","Nav","dynamicImg","CELO","App","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","updateBalance","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.20bebdde.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.9388447f.png\";","import React from \"react\";\nimport \"./Cover.css\";\nimport logo from \"../../assets/logo.png\";\n\nconst Cover = ({ connect }) => {\n  return (\n    <div className=\"cover-page d-flex align-items-center\">\n      <img className=\"cover-left\" src={logo} alt={logo} />\n      <div className=\"cover-right\">\n        <div className=\"head-div\">\n          <h1>Dynamic NFT</h1>\n        </div>\n        <p>\n          The only platform where you can claim ownership of your source codes\n        </p>\n        <div className=\"connect-msg\">\n          Please connect to continue in the dapp\n        </div>\n        <button onClick={() => connect().catch((e) => console.log(e))}>\n          Connect\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Cover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {ToastContainer} from 'react-toastify';\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: '',\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import { useContract } from \"./useContract\";\nimport Dynamic from \"../contracts/Dynamic.json\";\nimport contractAddress from \"../contracts/dynamic-address.json\";\n\n// export interface for NFT contract\nexport const useDynamicContract = () =>\n  useContract(Dynamic.abi, contractAddress.Dynamic);\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    try {      \n      // get a contract interface to interact with\n      setContract(new kit.web3.eth.Contract(abi, contractAddress));\n    } catch (e) {\n      console.log(\"error from useContract: \" + e);\n    }\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);  \n\n  return contract;\n};\n","import BigNumber from \"bignumber.js\";\nimport { ERC20_DECIMALS } from \"./constants\";\nimport { Web3Storage } from \"web3.storage/dist/bundle.esm.min.js\";\n\nconst getAccessToken = () => {\n  const token = process.env.REACT_APP_API_TOKEN;\n  return token;\n};\nconst makeStorageClient = () => {\n  return new Web3Storage({ token: getAccessToken() });\n};\nconst formattedName = (name) => {\n  let file_name;\n  const trim_name = name.trim();\n  if (trim_name.includes(\" \")) {\n    file_name = trim_name.replaceAll(\" \", \"%20\");\n    return file_name;\n  } else return trim_name;\n};\nconst makeFileObjects = (file) => {\n  const blob = new Blob([JSON.stringify(file)], { type: \"application/json\" });\n  const files = [new File([blob], `${file.name}.json`)];\n  return files;\n};\nconst client = makeStorageClient();\nconst storeFiles = async (files) => {\n  const cid = await client.put(files);\n  return cid;\n};\n\n// function to upload an image to Web3.storage\nexport const uploadToIpfs = async (file) => {\n  if (!file) return;\n  try {\n    const file_name = file[0].name;\n    const image_name = formattedName(file_name);\n    const image_cid = await storeFiles(file);\n    const image_url = `https://${image_cid}.ipfs.w3s.link/${image_name}`;\n    return image_url;\n  } catch (error) {\n    console.log(\"Error uploading file: \", error);\n  }\n};\n\n// Mint a token\nexport const mint = async (\n  contract,\n  performActions,\n  { name, description, ipfsImage, source, price }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !ipfsImage || !source || !price) return;\n    const { defaultAccount } = kit;\n\n    // trim any extra whitespaces from the name and\n    // replace the whitespace between the name with %20\n    const file_name = formattedName(name);\n\n    // convert NFT metadata to JSON format\n    const data = {\n      name,\n      image: ipfsImage,\n      description,\n      source,\n      owner: defaultAccount,\n    };\n\n    try {\n      // save NFT metadata to IPFS\n      const files = makeFileObjects(data);\n      const file_cid = await storeFiles(files);\n      const tokenURI = `https://${file_cid}.ipfs.w3s.link/${file_name}.json`;\n\n      const _price = new BigNumber(price).shiftedBy(ERC20_DECIMALS).toString();\n\n      // upload the NFT, mint the NFT and save the IPFS url to the blockchain\n      let tx = await contract.methods\n        .mintToken(tokenURI, _price)\n        .send({ from: defaultAccount });\n      return tx;\n    } catch (error) {\n      console.log(\"Error occured while minting NFT: \", error);\n    }\n  });\n};\n\n// Get NFT metadata from IPFS\nexport const fetchMetadata = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    const fetch_meta = await fetch(ipfsUrl);\n    const meta = await fetch_meta.json();\n\n    return meta;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// Get all tokens in market for sale\nexport const getMarketTokens = async (contract) => {\n  try {\n    const allTokens = await contract.methods.getAllMarketTokens().call();\n    const tokens = await Promise.all(\n      allTokens.map(async (_token) => {\n        const tokenURI = await contract.methods.tokenURI(_token.tokenId).call();\n        const tokenData = await fetchMetadata(tokenURI);\n        return {\n          id: _token.tokenId,\n          price: _token.price,\n          owner: _token.owner,\n          seller: _token.seller,\n          sold: _token.sold,\n          name: tokenData.name,\n          image: tokenData.image,\n          description: tokenData.description,\n          source: tokenData.source,\n        };\n      })\n    );\n    return tokens;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// Fetch all board members\nexport const myTokens = async (contract, defaultAccount) => {\n  try {\n    const myTokens = await contract.methods.getMyTokens().call();\n    const tokens = await Promise.all(\n      myTokens.map(async (_token) => {\n        const tokenURI = await contract.methods.tokenURI(_token).call();\n        const tokenData = await fetchMetadata(tokenURI);        \n        return {\n          id: _token,\n          owner: tokenData.owner,\n          name: tokenData.name,\n          image: tokenData.image,\n          description: tokenData.description,\n          source: tokenData.source,\n        };\n      })\n    );\n    return tokens;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// Buy a token from the market\nexport const buyToken = async (contract, performActions, tokenId, price) => {\n  await performActions(async (kit) => {\n    const { defaultAccount } = kit;\n    try {\n      await contract.methods\n        .buyToken(tokenId)\n        .send({ from: defaultAccount, value: price });\n    } catch (error) {\n      console.log(\"Error occured while buying token \", error);\n    }\n  });\n};\n","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal, Form } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\nconst AddNfts = ({ save }) => {\n  const [name, setName] = useState(null);\n  const [image, setImage] = useState(null);\n  const [description, setDescription] = useState(null);\n  const [source, setSource] = useState(null);\n  const [price, setPrice] = useState(0);\n  const [show, setShow] = useState(false);\n\n  // confirm if all fields are filled\n  const isFormFilled = () => name && image && description && source;\n\n  // close modal\n  const handleClose = () => {\n    setShow(false);\n  };\n\n  // open modal\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <button type=\"button\" onClick={handleShow} className=\"add-btn mb-4\">\n        Mint Code <i class=\"bi bi-plus\"></i>\n      </button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header>\n          <Modal.Title\n            style={{ color: \"#531c1c\", width: \"100%\", textAlign: \"center\" }}\n          >\n            Mint your source code on the blockchain\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Source code name\"\n              className={\"mb-3\"}\n              style={{ height: \"45px\", fontSize: \"0.9rem\" }}\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n            />\n            <Form.Control\n              as=\"textarea\"\n              placeholder=\"What does the code do?\"\n              className={\"mb-3\"}\n              style={{ height: \"80px\", fontSize: \"0.9rem\" }}\n              onChange={(e) => {\n                setDescription(e.target.value.trim());\n              }}\n            />\n            <Form.Control\n              as=\"textarea\"\n              placeholder=\"Enter source code here\"\n              className={\"mb-3\"}\n              style={{\n                height: \"80px\",\n                fontSize: \"0.9rem\",\n                fontFamily: \"monospace\",\n              }}\n              onChange={(e) => {\n                setSource(e.target.value.trim());\n              }}\n            />\n            <Form.Control\n              type=\"file\"\n              placeholder=\"NFT Image\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const image_file = e.target.files;\n                const imageUrl = await uploadToIpfs(image_file);\n                if (!imageUrl) {\n                  alert(\"An error occured while uploading image\");\n                  return;\n                }\n                setImage(imageUrl);\n              }}\n            />\n            <Form.Control\n              type=\"number\"\n              placeholder=\"How much you want to sell source code\"\n              className={\"mb-3\"}\n              style={{ height: \"45px\", fontSize: \"0.9rem\" }}\n              onChange={(e) => {\n                setPrice(e.target.value);\n              }}\n            />\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer className=\"modal_footer\">\n          <button className=\"close_btn\" onClick={handleClose}>\n            Close\n          </button>\n          <button\n            className=\"create_btn\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                description,\n                ipfsImage: image,\n                source,\n                price,\n              });\n              handleClose();\n            }}\n          >\n            Mint\n          </button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  // address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 3, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport \"./Card.css\";\nimport BigNumber from \"bignumber.js\";\nimport { ERC20_DECIMALS } from \"../../../utils/constants\";\nimport { truncateAddress } from \"../../../utils\";\n\n// Display image attached to NFT\nconst ViewImage = (props) => {\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <img src={props.image} />\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\n// Display source code attached to NFT\nconst ViewCode = (props) => {\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <textarea\n        value={props.source}\n        disabled\n        rows={30}\n        style={{ fontFamily: \"monospace\", padding: \"20px\" }}\n      />\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\n// NFT Cards Functionality\nconst Nft = ({ nft, buy, filter }) => {\n  const [showImage, setShowImage] = useState(false);\n  const [showCode, setShowCode] = useState(false);\n\n  const { kit } = useContractKit();\n  const { defaultAccount } = kit;\n\n  const { id, price, owner, seller, sold, name, image, description, source } =\n    nft;\n\n  return (\n    <div className=\"token_card\">\n      <div className=\"lbl\">Code name</div>\n      <div className=\"content\">{name}</div>\n      <div className=\"lbl\">Code description</div>\n      <div className=\"content\">{description}</div>\n      {!filter && (\n        <>\n          <div className=\"lbl\">Code price</div>\n          <div className=\"content\">\n            {new BigNumber(price).shiftedBy(-ERC20_DECIMALS).toString()} CELO\n          </div>\n          <div className=\"lbl\">Seller</div>\n          <div className=\"seller-addr\">{truncateAddress(seller)}</div>\n        </>\n      )}\n\n      <div className=\"btns\">\n        <button onClick={() => setShowImage(true)}>View NFT </button>\n        <ViewImage\n          show={showImage}\n          onHide={() => setShowImage(false)}\n          image={image}\n        />\n        {!filter && (\n          <>\n            {seller !== defaultAccount && (\n              <button onClick={() => buy(id, price)}>Buy</button>\n            )}\n          </>\n        )}\n\n        <button onClick={() => setShowCode(true)}>View Source code</button>\n        <ViewCode\n          show={showCode}\n          onHide={() => setShowCode(false)}\n          source={source}\n        />\n      </div>\n    </div>\n  );\n};\n\nNft.propTypes = {\n  image: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default Nft;\n","import React from 'react';\nimport { Spinner} from \"react-bootstrap\";\nconst Loader = () => (\n \n \n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getMarketTokens,\n  myTokens,\n  mint,\n  buyToken,\n} from \"../../../utils/minter\";\n\nconst NftList = ({ dynamicContract }) => {\n  const { performActions, address, kit } = useContractKit();\n  const { defaultAccount } = kit;\n  const [marketTokens, setMarketTokens] = useState([]);\n  const [allMyTokens, setAllMyTokens] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // fetch all tokens available for sale in market\n  const fetchMarketTokens = useCallback(async () => {\n    try {\n      setLoading(true);\n      const _tokens = await getMarketTokens(dynamicContract);\n      if (!_tokens) return;\n      setMarketTokens(_tokens);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [dynamicContract]);\n\n  // fetch all my tokens from the smart contract\n  const fetchAllMyTokens = useCallback(async () => {\n    try {\n      setLoading(true);\n      const _myTokens = await myTokens(dynamicContract, defaultAccount);\n      if (!_myTokens) return;\n      setAllMyTokens(_myTokens);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [dynamicContract]);\n\n  // Add new token\n  const mintToken = async (data) => {\n    try {\n      setLoading(true);\n      // mint token with this function\n      await mint(dynamicContract, performActions, data);\n      toast(<NotificationSuccess text=\"Loading NFTs ....\" />);\n      fetchMarketTokens();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to mint token\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Buy a token with CELO\n  const buy = async (tokenId, purchasePrice) => {\n    try {\n      setLoading(true);\n      // create an nft functionality\n      await buyToken(dynamicContract, performActions, tokenId, purchasePrice);\n      toast(<NotificationSuccess text=\"Loading NFTs ....\" />);\n      fetchMarketTokens();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to buy token\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    try {\n      if (address && dynamicContract) {\n        fetchMarketTokens();\n        fetchAllMyTokens();\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [dynamicContract, address, fetchMarketTokens, fetchAllMyTokens]);\n\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"marketplace\">\n              <h1\n                className=\"fs-10 fw-bold text-center mb-5\"\n                style={{ color: \"#531c1c\" }}\n              >\n                Tokens available for sale\n              </h1>\n              <AddNfts save={mintToken} address={address} />\n            </div>\n            <div className=\"all_nft\">\n              {marketTokens.map((_nft) => (\n                <Nft\n                  key={_nft.index}\n                  nft={{\n                    ..._nft,\n                  }}\n                  buy={buy}\n                  filter={false}\n                />\n              ))}\n            </div>\n            <h1\n              className=\"fs-10 fw-bold text-center mb-5\"\n              style={{ color: \"#531c1c\" }}\n            >\n              My tokens\n            </h1>\n            <div className=\"all_nft\">\n              {allMyTokens.map((_nft) => (\n                <Nft\n                  key={_nft.index}\n                  nft={{\n                    ..._nft,\n                  }}\n                  filter={true}\n                />\n              ))}\n            </div>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n  // props passed into this component\n  dynamicContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  vContract: null,\n};\n\nexport default NftList;\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({ address, size, ...rest }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\n      );\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest}>\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"../../utils\";\nimport Identicon from \"../ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        {/* Wallet Dropdown functionality */}\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","export default __webpack_public_path__ + \"static/media/dynamic_image.25f84803.jfif\";","import React from \"react\";\nimport Wallet from \"../wallet\";\nimport dynamicImg from \"../../assets/dynamic_image.jfif\";\nimport { Nav } from \"react-bootstrap\";\nimport \"./NavBar.css\";\n\nconst NavBar = ({ address, balance, destroy, connect }) => {\n  return (\n    <Nav className=\"nav justify-content-between px-5 py-3\">\n      <Nav.Item>\n        <img className=\"logo_img\" src={dynamicImg} alt=\"Logo\" />        \n      </Nav.Item>\n      {address ? (\n        <Nav.Item>          \n          <Wallet\n            address={address}\n            amount={balance.CELO}\n            symbol=\"CELO\"\n            destroy={destroy}\n          />\n        </Nav.Item>\n      ) : (\n        <Nav.Item>\n          <button onClick={() => connect().catch((e) => console.log(e))}>\n            Connect\n          </button>\n        </Nav.Item>\n      )}\n    </Nav>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport Cover from \"./components/minter/Cover\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport { useBalance, useDynamicContract } from \"./hooks\";\nimport Nfts from \"./components/minter/nfts\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport NavBar from \"./components/navbar/NavBar\"\n\nconst App = function AppWrapper() {\n  const { address, destroy, connect } = useContractKit();\n\n  // get Celo balance\n  const { balance, getBalance } = useBalance();\n\n  // initialize \"Dynamic\" contract\n  const dynamicContract = useDynamicContract();\n\n  return (\n    <>\n      <Notification />\n      {address && (\n        <NavBar\n          address={address}\n          balance={balance}\n          destroy={destroy}\n          connect={connect}\n        />\n      )}\n\n      {address ? (\n        <Container fluid=\"md\">\n          <main>\n            <Nfts\n              updateBalance={getBalance}\n              dynamicContract={dynamicContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        <Cover connect={connect} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address || balance) getBalance();\n  }, [address, getBalance, balance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Dynamic\",\n        description: \"A decentralised application that gives you ownership of your source codes\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}